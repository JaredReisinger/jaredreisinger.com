@function str-split($string, $sep) {
  $parts: ();
  $index: str-index($string, $sep);
  @while $index != null {
    $part: str-slice($string, 1, $index - 1);
    $parts: append($parts, $part);
    $string: str-slice($string, $index + 1);
    $index: str-index($string, $sep);
  }

  $parts: append($parts, $string);

  @return $parts;
}

@function str-join($parts, $sep) {
  $string: "";
  @each $part in $parts {
    $string: $string + $sep + $part;
  }
  // remove the leading $sep?
  @return str-slice($string, str-length($sep) + 1);
}

// takes a font description (see vars!) and creates the Google Font style
// descriptor.  Note that weights and family aren't related (but should be)
@function font-descriptor($font) {
  $name: unquote(nth(map-get($font, 'family'), 1));
  $nameParam: str-join(str-split($name, ' '), '+');

  $mono: unquote(nth(map-get($font, 'family-fixed'), 1));
  $monoParam: str-join(str-split($mono, ' '), '+');

  $weight: map-get($font, 'weight');
  $weight-bold: map-get($font, 'weight-bold');

  $descriptor: "#{$nameParam}:#{$weight},#{$weight}i,#{$weight-bold},#{$weight-bold}i|#{$monoParam}:#{$weight},#{$weight}i,#{$weight-bold},#{$weight-bold}i";
  // @debug "font descriptor for '#{$name}' and '#{$mono}': '#{$descriptor}'";
  @return $descriptor;
}

// Not sure about val()... is it a CSS function?

/// Gets a duration value.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function _duration($keys...) {
  @return val($duration, $keys...);
}

/// Gets a font value.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function _font($keys...) {
  @return val($font, $keys...);
}

/// Gets a misc value.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function _misc($keys...) {
  @return val($misc, $keys...);
}

/// Gets a palette value.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function _palette($keys...) {
  @return val($palette, $keys...);
}

/// Gets a size value.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function _size($keys...) {
  @return val($size, $keys...);
}
